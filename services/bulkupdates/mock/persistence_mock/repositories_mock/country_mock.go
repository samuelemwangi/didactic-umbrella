// Code generated by MockGen. DO NOT EDIT.
// Source: persistence\repositories\country.go

// Package repositories_mock is a generated GoMock package.
package repositories_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/samuelemwangi/jumia-mds-test/services/bulkupdates/domain"
)

// MockCountryRepository is a mock of CountryRepository interface.
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository.
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance.
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// GetCountryByCode mocks base method.
func (m *MockCountryRepository) GetCountryByCode(arg0 string) (*domain.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByCode", arg0)
	ret0, _ := ret[0].(*domain.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByCode indicates an expected call of GetCountryByCode.
func (mr *MockCountryRepositoryMockRecorder) GetCountryByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByCode", reflect.TypeOf((*MockCountryRepository)(nil).GetCountryByCode), arg0)
}

// SaveCountry mocks base method.
func (m *MockCountryRepository) SaveCountry(arg0 *domain.Country) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCountry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCountry indicates an expected call of SaveCountry.
func (mr *MockCountryRepositoryMockRecorder) SaveCountry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCountry", reflect.TypeOf((*MockCountryRepository)(nil).SaveCountry), arg0)
}
