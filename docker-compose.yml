version: '3.7'

services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - "./mounts/zookeeper-1/data:/var/lib/zookeeper/data"
      - "./mounts/zookeeper-1/logs:/var/lib/zookeeper/log"
    networks:
      - services_network
    restart: on-failure

  kafka-1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
    container_name: kafka-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - "./mounts/kafka-1/data:/var/lib/kafka/data"
    networks:
      - services_network
    restart: on-failure

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka-1
    container_name: init-kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-1:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-1:9092 --create --if-not-exists --topic file-process-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-1:9092 --list
      "
    networks:
      - services_network
    restart: on-failure

  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: jumia-mds-test
      MYSQL_USER: test_user
      MYSQL_PASSWORD: testP@ssw0rd
    volumes:
      - "./mounts/mysql-db/data:/var/lib/mysql"
    networks:
      - services_network
    restart: on-failure

  products-service:
    image: products-service
    depends_on:
      - kafka-1
      - mysql-db
    build:
      context: ./services/products
      dockerfile: Dockerfile
    container_name: products-service
    environment:
      DB_HOST: mysql-db
      DB_USER: test_user
      DB_PASSWORD: testP@ssw0rd
      DB_NAME: jumia-mds-test
      DB_PORT: 3306
      FILE_PATH: ./uploads
      BOOTSTRAP_SERVERS: kafka-1:9092
    volumes:
      - "./mounts/uploads:/app/uploads"
    networks:
      - services_network
    restart: on-failure

  bulkupdates-service:
    image: bulkupdates-service
    depends_on:
      - kafka-1
      - mysql-db
      - products-service
    build:
      context: ./services/bulkupdates
      dockerfile: Dockerfile
    container_name: bulkupdates-service
    environment:
      DB_HOST: mysql-db
      DB_USER: test_user
      DB_PASSWORD: testP@ssw0rd
      DB_NAME: jumia-mds-test
      DB_PORT: 3306
      FILE_PATH: ./uploads
      BOOTSTRAP_SERVERS: kafka-1:9092
    volumes:
      - "./mounts/uploads:/app/uploads"
    networks:
      - services_network
    restart: on-failure

  krakend-ce:
    image: devopsfaith/krakend:latest
    container_name: krakend-ce
    volumes:
      - ./krakend:/etc/krakend
    ports:
      - "8088:8080"
    command: [ "run", "-d", "-c", "/etc/krakend/krakend.json" ]
    depends_on:
      - products-service
      - bulkupdates-service
    networks:
      - services_network

networks:
  services_network:
    name: internal_services_network
    driver: bridge
